---
# Configures Ubuntu server OS to become a media server
# assumes the machine will have an external disk with the first partition formatted as ext4
- name: Media server setup
  hosts: all
  become: true
  gather_facts: true
  vars_files: vars.yml

  tasks:
    - name: Disable unattended-upgrades service
      ansible.builtin.systemd_service:
        scope: system
        name: unattended-upgrades
        enabled: false
        state: stopped
        masked: true

    - name: Apt update
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600  # Update cache if older than one hour

    - name: Apt upgrade
      ansible.builtin.apt:
        upgrade: full
        autoremove: true
        autoclean: true

    - name: Install rootless podman requirements
      ansible.builtin.apt:
        pkg:
          - podman-compose
          - slirp4netns
          - acl

    - name: Create a non-login user for running containers
      ansible.builtin.user:
        name: "{{ podman_user }}"
        uid: "{{ podman_id }}"
        shell: /usr/sbin/nologin

    - name: Ensure admin can view podman user $HOME
      ansible.builtin.file:
        path: "{{ podman_home }}"
        state: directory
        mode: '755'

    - name: Append line to .bashrc  # set path for container-user's podman config files
      ansible.builtin.lineinfile:
        path: /home/{{ podman_user }}/.bashrc
        line: "export XDG_RUNTIME_DIR=/run/user/{{ podman_id }}"
        state: present
        insertbefore: EOF  # Add the line at the end of the file

    - name: Modify /etc/subuid  # set user namespaces for container-user
      ansible.builtin.lineinfile:
        path: /etc/subuid
        search_string: "{{ podman_user }}"
        state: present
        line: "{{ podman_user }}:200000:65536"

    - name: Modify /etc/subgid  # set user namespaces for container-user
      ansible.builtin.lineinfile:
        path: /etc/subgid
        search_string: "{{ podman_user }}"
        state: present
        line: "{{ podman_user }}:200000:65536"

    - name: Enable login linger  # allow processes to continue without active container-user login
      ansible.builtin.shell: loginctl enable-linger {{ podman_user }} && loginctl show-user {{ podman_user }} --property=Linger
      register: result
      changed_when: '"Linger=yes" in result.stdout'
      failed_when: result.rc == 2 or "Linger=no" in result.stdout

    - name: Fail if external disk is disconnected
      ansible.builtin.fail:
        msg: "Connect external hard disk!"
      when: "'sda' not in ansible_devices"  # Check if 'sdb' is not in the devices

    - name: Mount external disk
      ansible.posix.mount:
        path: /media/usb_hdd
        src: /dev/sda1
        opts: defaults
        state: mounted
        fstype: ext4

    - name: Create group 'media'
      ansible.builtin.group:
        name: media
        state: present
        gid: 201000

    - name: Create container groups
      ansible.builtin.group:
        name: "{{ item.name }}"
        state: present
        gid: "{{ item.real_uid }}"
      loop: "{{ containers }}"

    - name: Create container users
      ansible.builtin.user:
        name: "{{ item.name }}"
        shell: /usr/sbin/nologin
        uid: "{{ item.real_uid }}"
        groups: media
        append: true
        create_home: false
      loop: "{{ containers }}"

    - name: Ensure media directories exists
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ item.mode }}"
        recurse: true
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
      loop: "{{ directories }}"

    - name: Ensure app directories exists
      ansible.builtin.file:
        path: "{{ podman_home }}/{{ item.name }}"
        state: directory
        mode: "755"
        recurse: true
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
      loop: "{{ containers }}"

    - name: Pull container images
      become: true
      become_user: "{{ podman_user }}"
      containers.podman.podman_image:
        name: "{{ item.image }}"
        force: true
      loop: "{{ containers }}"

    - name: Create containers' service files
      become: true
      become_user: "{{ podman_user }}"
      containers.podman.podman_container:
        name: "{{ item.name }}"
        image: "{{ item.image }}"
        state: present
        recreate: true
        publish: "{{ item.port }}"
        generate_systemd:
          path: "{{ podman_systemd_path }}"
          new: true
          restart_policy: always
        env:
          PUID: "{{ item.puid }}"
          PGID: "{{ item.pgid }}"
          TZ: "{{ timezone }}"
        volume: "{{ item.mount }}"
      loop: "{{ containers }}"

    - name: Start and enable container services
      become: true
      become_user: "{{ podman_user }}"
      ansible.builtin.systemd_service:
        daemon_reload: true
        scope: user
        enabled: true
        state: started
        name: "container-{{ item.name }}"
        masked: false
      loop: "{{ containers }}"

    - name: Prune old container images
      become: true
      become_user: "{{ podman_user }}"
      containers.podman.podman_prune:
        image: true
        system_all: true

    - name: Reboot machine
      ansible.builtin.reboot:
